{% extends 'base.html.twig' %}

{% block body %}
    <div class="container container-payment-plan">
        <h1>Accepter le plan de paiement</h1>
        {{ parent() }}

        <div class="license-container">
            <h2>Licence de {{ paymentPlan.license.user.firstname }} {{ paymentPlan.license.user.lastname }}</h2>
            {{ include('/license/partial/_card.html.twig', { 'license' : paymentPlan.license, 'isAdmin' : true }) }}
        </div>

        <h2>Plan de paiement proposé</h2>
        <p>{{ paymentPlan.userComment }}</p>

        <div class="form-payment-plan">
            <h2>Création des ordres de paiement</h2>

            <div class="alert-container">
                <p id="total-amount" class="alert alert-error hidden">Le montant ne correspond pas au prix de la licence.</p>
                <p class="alert alert-success hidden">Le montant correspond au prix de la license.</p>
                <p id="first-amount" class="alert alert-error hidden">Le premier montant doit être égal ou supérieur à 80,00€</p>
                <p id="date-error" class="alert alert-error hidden">Chaque date doit être postérieure à la date précédente.</p>
            </div>

            {{ form_start(form) }}

            <div class="payment-order-collection" data-prototype="{{ form_widget(form.payment_orders.vars.prototype)|e('html_attr') }}">
                {% for orderForm in form.payment_orders %}
                    <div class="form-order">
                        {{ form_row(orderForm.amount) }}
                        {{ form_row(orderForm.due_date) }}
                        {{ form_row(orderForm.comment) }}
                    </div>
                {% endfor %}
            </div>

            <button type="button" class="btn btn-primary" id="add-order">Ajouter un ordre</button>        
            <button type="button" class="btn btn-danger" id="remove-last-order" style="display: none;">Supprimer le dernier ordre</button>

            <button id="form-submit" type="submit" class="btn btn-success" disabled>Valider le plan de paiement</button>

            {{ form_end(form) }}
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const orderCollection = document.querySelector('.payment-order-collection');
                const addOrderButton = document.querySelector('#add-order');
                const removeLastOrderButton = document.querySelector('#remove-last-order');
                const submitBtn = document.getElementById('form-submit');
                const licensePrice = {{ paymentPlan.license.price }};

                const alertSuccess = document.querySelector('.alert-success');
                const totalAmountError = document.getElementById('total-amount');
                const firstAmountError = document.getElementById('first-amount');
                const dateError = document.getElementById('date-error');  // Message d'erreur pour les dates
                
                let index = {{ form.payment_orders|length }};
                const prototype = orderCollection.getAttribute('data-prototype');

                const calculateTotalAmount = () => {
                    let total = 0;
                    const inputsAmount = document.querySelectorAll('input[id*="_amount"]');
                    inputsAmount.forEach(amountField => {
                        const value = parseFloat(amountField.value);
                        if (!isNaN(value)) {
                            total += value;
                        }
                    });
                    return total;
                };

                const validateFirstAmount = () => {
                    const firstAmountInput = document.querySelector('input[id*="_amount"]');
                    if (firstAmountInput) {
                        const firstAmountValue = parseFloat(firstAmountInput.value);
                        if (isNaN(firstAmountValue) || firstAmountValue < 80) {
                            firstAmountError.classList.remove('hidden');
                            return false;
                        } else {
                            firstAmountError.classList.add('hidden');
                            return true;
                        }
                    }
                    return false;
                };

                const validateDatesOrder = () => {
                    const dateInputs = Array.from(document.querySelectorAll('input[id*="_due_date"]'));
                    let isValid = true;

                    for (let i = 1; i < dateInputs.length; i++) {
                        const prevDate = new Date(dateInputs[i - 1].value);
                        const currentDate = new Date(dateInputs[i].value);

                        if (prevDate >= currentDate) {
                            dateError.classList.remove('hidden');
                            isValid = false;
                            break;
                        }
                    }

                    if (isValid) {
                        dateError.classList.add('hidden');
                    }

                    return isValid;
                };

                const areAllDatesFilled = () => {
                    const dateInputs = Array.from(document.querySelectorAll('input[id*="_due_date"]'));
                    return dateInputs.every(input => input.value.trim() !== "");
                };

                const updateUIBasedOnTotal = () => {
                    const totalAmount = calculateTotalAmount();
                    const hasValidFirstAmount = validateFirstAmount();
                    const hasValidDatesOrder = validateDatesOrder();
                    const allDatesFilled = areAllDatesFilled();

                    const anyAmountFilled = Array.from(document.querySelectorAll('input[id*="_amount"]'))
                                                .some(input => input.value.trim() !== "");

                    if (totalAmount === licensePrice && anyAmountFilled) {
                        alertSuccess.classList.remove('hidden');
                        totalAmountError.classList.add('hidden');
                    } else if (anyAmountFilled) {
                        alertSuccess.classList.add('hidden');
                        totalAmountError.classList.remove('hidden');
                    } else {
                        alertSuccess.classList.add('hidden');
                        totalAmountError.classList.add('hidden');
                    }

                    // Activer/désactiver le bouton de soumission
                    submitBtn.disabled = !(totalAmount === licensePrice && hasValidFirstAmount && hasValidDatesOrder && allDatesFilled);
                };

                addOrderButton.addEventListener('click', function() {
                    if (prototype) {
                        const newFormHtml = prototype.replace(/__name__/g, index);
                        index++;

                        const newForm = document.createElement('div');
                        newForm.classList.add('form-order');
                        newForm.innerHTML = newFormHtml;
                        orderCollection.appendChild(newForm);

                        removeLastOrderButton.style.display = 'inline-block';

                        newForm.querySelector('input[id*="_amount"]').addEventListener('input', updateUIBasedOnTotal);
                        newForm.querySelector('input[id*="_due_date"]').addEventListener('input', updateUIBasedOnTotal);
                        
                        updateUIBasedOnTotal();
                    }
                });

                removeLastOrderButton.addEventListener('click', function() {
                    const lastOrder = orderCollection.lastElementChild;
                    if (lastOrder) {
                        orderCollection.removeChild(lastOrder);
                        index--;

                        if (orderCollection.children.length === 0) {
                            removeLastOrderButton.style.display = 'none';
                        }

                        updateUIBasedOnTotal();
                    }
                });

                document.querySelectorAll('input[id*="_amount"]').forEach(amountField => {
                    amountField.addEventListener('input', updateUIBasedOnTotal);
                });

                document.querySelectorAll('input[id*="_due_date"]').forEach(dateField => {
                    dateField.addEventListener('input', updateUIBasedOnTotal);
                });

                updateUIBasedOnTotal();
            });
        </script>

    </div>
{% endblock %}
